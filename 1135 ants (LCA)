#include <stdio.h>
#include <stdlib.h>

// O professor Cadinho é um gênio

long long tree_distance(
	int anthill_count,
	int *parent_list,
	int *distance_to_parent,
	int *level,
	int vertex_a,
	int vertex_b)
{
	long long distance = 0;
	
	while (vertex_a != vertex_b) {
		if (level[vertex_a] > level[vertex_b]) {
			distance += distance_to_parent[vertex_a];
			vertex_a = parent_list[vertex_a];
		}
		else if (level[vertex_b] > level[vertex_a]) {
			distance += distance_to_parent[vertex_b];
			vertex_b = parent_list[vertex_b];
		}
		else {
			distance += distance_to_parent[vertex_a] + distance_to_parent[vertex_b];
			vertex_a = parent_list[vertex_a];
			vertex_b = parent_list[vertex_b];
		}
	}
	
	return distance;
}

int main(int argc, char *argv[]) {
	int i, hills, queries;

	int *parent = NULL;
	int *level = NULL;
	unsigned int *distance_to_parent = NULL;
	
	while (1) {
		free(parent);
		free(distance_to_parent);
		free(level);
	
		scanf("%d", &hills);
		
		if (!hills) break;
	
		level = (int*) calloc(hills, sizeof(int));
		parent = (int*) calloc(hills, sizeof(int));
		distance_to_parent = (unsigned int*) calloc(hills, sizeof(unsigned int));	
		
		int connected_tunnel, distance;
		for (i = 1; i < hills; i++) {
			scanf("%d %d", &connected_tunnel, &distance);

			parent[i] = connected_tunnel;
			distance_to_parent[i] = distance;
			level[i] = level[connected_tunnel] + 1;
		}
		
		scanf("%d", &queries);
		
		int hill_a, hill_b;
		long long calc_distance;

		while (queries--) {
			scanf("%d %d", &hill_a, &hill_b);
			
			calc_distance = tree_distance(hills, parent, distance_to_parent, level, hill_a, hill_b);
			printf("%lld", calc_distance);

			if (queries) putchar(' ');
		}
		
		putchar('\n');
	}
	
	return 0;
}
